diff --git a/node_modules/@polkadot/types/cjs/extrinsic/v4/ExtrinsicPayload.js b/node_modules/@polkadot/types/cjs/extrinsic/v4/ExtrinsicPayload.js
index 200193c..f5d639a 100644
--- a/node_modules/@polkadot/types/cjs/extrinsic/v4/ExtrinsicPayload.js
+++ b/node_modules/@polkadot/types/cjs/extrinsic/v4/ExtrinsicPayload.js
@@ -13,7 +13,16 @@ const util_js_1 = require("../util.js");
 class GenericExtrinsicPayloadV4 extends types_codec_1.Struct {
     __internal__signOptions;
     constructor(registry, value) {
-        super(registry, (0, util_1.objectSpread)({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
+        let _value = value;
+        if (value && value.assetId && (0, util_1.isHex)(value.assetId)) {
+            const assetId = registry.createType('TAssetConversion', (0, util_1.hexToU8a)(value.assetId));
+            // we only want to adjust the payload if the hex passed has the option
+            if (value.assetId === '0x00' ||
+                value.assetId === '0x01' + assetId.toHex().slice(2)) {
+                _value = Object.assign({}, value, { assetId: assetId.toJSON() });
+            }
+        }
+        super(registry, (0, util_1.objectSpread)({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), _value);
         // Do detection for the type of extrinsic, in the case of MultiSignature
         // this is an enum, in the case of AnySignature, this is a Hash only
         // (which may be 64 or 65 bytes)
diff --git a/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js b/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
index 942539e..4b2330a 100644
--- a/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
+++ b/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
@@ -1,5 +1,5 @@
 import { Enum, Struct } from '@polkadot/types-codec';
-import { objectSpread } from '@polkadot/util';
+import { hexToU8a, isHex, objectSpread } from '@polkadot/util';
 import { sign } from '../util.js';
 /**
  * @name GenericExtrinsicPayloadV4
@@ -10,7 +10,16 @@ import { sign } from '../util.js';
 export class GenericExtrinsicPayloadV4 extends Struct {
     __internal__signOptions;
     constructor(registry, value) {
-        super(registry, objectSpread({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
+        let _value = value;
+        if (value && value.assetId && isHex(value.assetId)) {
+            const assetId = registry.createType('TAssetConversion', hexToU8a(value.assetId));
+            // we only want to adjust the payload if the hex passed has the option
+            if (value.assetId === '0x00' ||
+                value.assetId === '0x01' + assetId.toHex().slice(2)) {
+                _value = Object.assign({}, value, { assetId: assetId.toJSON() });
+            }
+        }
+        super(registry, objectSpread({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), _value);
         // Do detection for the type of extrinsic, in the case of MultiSignature
         // this is an enum, in the case of AnySignature, this is a Hash only
         // (which may be 64 or 65 bytes)
